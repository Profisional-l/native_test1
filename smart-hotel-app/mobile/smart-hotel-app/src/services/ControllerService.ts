import { Platform } from 'react-native';
import { BleManager, Device } from 'react-native-ble-plx';
import TcpSocket from 'react-native-tcp-socket';
import { Buffer } from 'buffer';

// –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export type State = {
  light_on: boolean;
  door_lock: boolean;
  channel_1: boolean;
  channel_2: boolean;
  temperature: number;
  pressure: number;
  humidity: number;
};

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
export enum States {
  LightOn = 0,
  LightOff = 1,
  DoorLockOpen = 2,
  DoorLockClose = 3,
  Channel1On = 4,
  Channel1Off = 5,
  Channel2On = 6,
  Channel2Off = 7,
}

// UUID —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ BLE
const SERVICE_UUID = '0000fff0-0000-1000-8000-00805f9b34fb';
const CHAR_IDENTIFY = '0000ff02-0000-1000-8000-00805f9b34fb';
const CHAR_SET_STATE = '0000fff1-0000-1000-8000-00805f9b34fb';
const CHAR_GET_STATE = '0000fff2-0000-1000-8000-00805f9b34fb';

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TCP
const DEVICE_NAME = 'ROOM_7';
const TCP_HOST = '192.168.1.100';
const TCP_PORT = 7000;
const AUTH_TOKEN = 'CM6wqJB5blIMvBKQ';

export class ControllerService {
  private manager: BleManager | null = null;
  private device: Device | null = null;

  // –§–ª–∞–≥ ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ BLE –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  private BLE_ENABLED = Platform.OS === 'ios' || Platform.OS === 'android';

  constructor() {
    if (this.BLE_ENABLED) {
      this.manager = new BleManager();
      console.log('‚úÖ BLE Manager initialized');
    } else {
      this.manager = null;
      console.log('‚ö†Ô∏è BLE not supported on this platform, using TCP fallback');
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ BLE (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  async connectBLE(): Promise<void> {
    if (!this.BLE_ENABLED || !this.manager) {
      throw new Error('BLE –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ');
    }

    console.log('üîÑ Scanning for BLE devices...');
    return new Promise((resolve, reject) => {
      this.manager!.startDeviceScan(null, null, async (error, device) => {
        if (error) {
          console.error('‚ùå BLE Scan Error:', error);
          reject(error);
          return;
        }

        if (device && device.name === DEVICE_NAME) {
          console.log(`üîó Found device: ${DEVICE_NAME}`);
          this.manager!.stopDeviceScan();
          try {
            const connected = await device.connect();
            await connected.discoverAllServicesAndCharacteristics();
            this.device = connected;
            console.log('‚úÖ Connected to BLE device.');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º IdentifyRequest
            await this.writeCharacteristic(CHAR_IDENTIFY, AUTH_TOKEN);
            console.log('üîë Authentication successful.');
            resolve();
          } catch (e) {
            console.error('‚ùå BLE Connection Error:', e);
            reject(e);
          }
        }
      });
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ BLE
  async getStateBLE(): Promise<State> {
    if (!this.BLE_ENABLED || !this.device) {
      throw new Error('BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ BLE –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    try {
      const char = await this.device.readCharacteristicForService(SERVICE_UUID, CHAR_GET_STATE);
      const data = Buffer.from(char.value!, 'base64');
      const obj = JSON.parse(data.toString());

      return {
        light_on: obj.light_on,
        door_lock: obj.door_lock,
        channel_1: obj.channel_1,
        channel_2: obj.channel_2,
        temperature: obj.temperature,
        pressure: obj.pressure,
        humidity: obj.humidity,
      };
    } catch (error) {
      console.error('‚ùå Error reading BLE state:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ BLE
  async setStateBLE(state: States): Promise<boolean> {
    if (!this.BLE_ENABLED || !this.device) {
      throw new Error('BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ BLE –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    try {
      const buf = Buffer.from(JSON.stringify({ set_state: state }));
      await this.device.writeCharacteristicWithResponseForService(
        SERVICE_UUID,
        CHAR_SET_STATE,
        buf.toString('base64')
      );
      console.log('üì§ Sent BLE state:', state);
      return true;
    } catch (error) {
      console.error('‚ùå Error setting BLE state:', error);
      throw error;
    }
  }

  // –ó–∞–ø–∏—Å—å –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É BLE (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è)
  private async writeCharacteristic(charUUID: string, value: string) {
    if (!this.BLE_ENABLED || !this.device) {
      throw new Error('BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ BLE –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    const buffer = Buffer.from(value);
    await this.device.writeCharacteristicWithResponseForService(
      SERVICE_UUID,
      charUUID,
      buffer.toString('base64')
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ TCP (fallback)
  async getStateTCP(): Promise<State> {
    console.log('üåê Fetching state via TCP...');
    return new Promise((resolve, reject) => {
      const client = TcpSocket.createConnection({ host: TCP_HOST, port: TCP_PORT }, () => {
        const msg = { identify: AUTH_TOKEN, get_state: {} };
        client.write(JSON.stringify(msg));
      });

      client.on('data', (data) => {
        client.destroy();
        try {
          const obj = JSON.parse(data.toString());
          resolve({
            light_on: obj.state.light_on,
            door_lock: obj.state.door_lock,
            channel_1: obj.state.channel_1,
            channel_2: obj.state.channel_2,
            temperature: obj.state.temperature,
            pressure: obj.state.pressure,
            humidity: obj.state.humidity,
          });
        } catch (e) {
          console.error('‚ùå TCP Data Parse Error:', e);
          reject(e);
        }
      });

      client.on('error', (error) => {
        console.error('‚ùå TCP Connection Error:', error);
        reject(error);
      });
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ TCP (fallback)
  async setStateTCP(state: States): Promise<boolean> {
    console.log('üåê Sending state via TCP...');
    return new Promise((resolve, reject) => {
      const client = TcpSocket.createConnection({ host: TCP_HOST, port: TCP_PORT }, () => {
        const msg = { identify: AUTH_TOKEN, set_state: state };
        client.write(JSON.stringify(msg));
      });

      client.on('data', () => {
        client.destroy();
        console.log('üì§ Sent TCP state:', state);
        resolve(true);
      });

      client.on('error', (error) => {
        console.error('‚ùå TCP Connection Error:', error);
        reject(error);
      });
    });
  }

  // –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ BLE, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ TCP
  async getState(): Promise<State> {
    if (this.BLE_ENABLED) {
      try {
        return await this.getStateBLE();
      } catch (e) {
        console.warn('‚ö†Ô∏è BLE getState failed, fallback to TCP', e);
      }
    }
    return this.getStateTCP();
  }

  // –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ BLE, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ TCP
  async setState(state: States): Promise<boolean> {
    if (this.BLE_ENABLED) {
      try {
        return await this.setStateBLE(state);
      } catch (e) {
        console.warn('‚ö†Ô∏è BLE setState failed, fallback to TCP', e);
      }
    }
    return this.setStateTCP(state);
  }
}
